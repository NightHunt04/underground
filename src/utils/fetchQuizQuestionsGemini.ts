import { GoogleGenerativeAI } from '@google/generative-ai'

const API = import.meta.env.VITE_APP_GEMINI_API_KEY
const genAI = new GoogleGenerativeAI(API)

const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })

function extractJsonOrText(input: string): string {
    const jsonRegex = /```json\s*([\s\S]*?)\s*```/
    const match = input.match(jsonRegex);
    
    if (match && match[1]) {
      return match[1].trim()
    } 
    
    return input.trim();
  }

export default async function fetchQuizQuestionsGemini(title: string, statement: string, practical: boolean, lang: string): Promise<string> {
    try {
        let prompt 
        if (!practical)
            prompt = `You are bot who doesn\'t talk but only makes 5 questions and unique and distinct options for those questions along with an answer on the topic given by the user in just a single statement (All the options must be unique and no options should repeat). The correct answer must be from the given unique options, the correct answer must be one of the options generated and its strings must match completely. The keys in the generated format response must be in strings. Your response must be compulsarily in the given format and must be in the format of json given : {"response": [{question: <question1>, options: [\'option1\', \'option2\', \'option3\', \'option4\'],  correct: \'correct_answer_from_option\'}, {question: <question2>, options: [\'option1\', \'option2\', \'option3\', \'option4\'], correct: \'correct_answer_from_option\'}, {question: <question3>, options: [\'option1\', \'option2\', \'option3\', \'option4\'], correct: \'correct_answer_from_option\'}, {question: <question4>, options: [\'option1\', \'option2\', \'option3\', \'option4\'], correct: \'correct_answer_from_option\'}, {question: <question5>, options: [\'option1\', \'option2\', \'option3\', \'option4\'], correct: \'correct_answer_from_option\'}]}. \n\nGive 5 questions and 4 options for individual questions along with correct answer option related to this topic: ${title} Statement: ${statement}, the related language is in : ${lang}, \n\nGive the response in json format (The response MUST be exactly in the same format as given)`
        else prompt = `You are a bot who doesn't talk, you only have to provide 3 similar coding/practical questions along with their coding program answers in the specific language given by the user. Your response must be in the format : {"response": [{question: <question1>, code: <code1>}, {question: <question2>, code: <code2>}, {question: question3, code: <code3>}]}. In the response, the question must be similar in terms of concept to the problem statement given by the user. The question generated by you must have proper explaination regarding the problem along with example containing some test cases (1 or 2 test cases). The code generated by you must be in the format \'\'\'<language> <code> \'\'\' (you must format the code by adding \\t or \\n for tabs or new line. The questions must be in the type of : [Write a program...., Program a code in which....], the questions must be regarding to create or program a code instead of asking normal theoretical questions. The questions must also have some sample test case examples for example if the question is to write a program to add two numbers, then it must provide a sample test case such as in format of : Input: 10 20 \nOutput: 30. User - Give 3 practical similar type/conecpt of questions along with their code answer related to this topic: ${title}, ${statement}, the code language should be in : ${lang}.  \n\n(The response MUST be exactly in the same format as given) \n\n(Make sure that if you use strings inside the response code, then use single inverted comma to represent string inside a string , give response in such format that the given response string can be parsed into JSON)`
        
        let result = ''

        const response = await model.generateContent(prompt)
        result = response.response.text()
        console.log(result)
        result = extractJsonOrText(result)

        console.log(result)


        return result
    } catch(err) {
        console.error('Error occured:', err)
        return 'error'
    }

}
